name: GitHub Pages

on:
  workflow_call:
    secrets:
      BOT_ID:
        description: "GitHub App ID for custom bot (optional)"
        required: false
      BOT_KEY:
        description: "GitHub App private key for custom bot (optional)"
        required: false
  push:
    branches:
      - main
    paths:
      - "docs/**"
      - ".github/workflows/gh-pages.yaml"
  workflow_dispatch:

# Permissions set by workflow call
# permissions:
#   contents: read
#   pages: write
#   id-token: write

# Required permissions
#permissions:
#  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./docs

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Initialize custom bot
        id: bot
        uses: starburst997/custom-bot-init@v1
        with:
          app-id: ${{ secrets.BOT_ID }}
          private-key: ${{ secrets.BOT_KEY }}

      - name: Get artifact metadata
        id: artifact
        env:
          GH_TOKEN: ${{ steps.bot.outputs.token }}
        run: |
          # Get the artifact ID for github-pages artifact
          ARTIFACT_ID=$(gh api /repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts \
            --jq '.artifacts[] | select(.name == "github-pages") | .id')

          if [ -z "$ARTIFACT_ID" ]; then
            echo "Error: github-pages artifact not found"
            exit 1
          fi

          echo "artifact_id=$ARTIFACT_ID" >> $GITHUB_OUTPUT
          echo "Found artifact ID: $ARTIFACT_ID"

      - name: Deploy to GitHub Pages
        id: deployment
        env:
          GH_TOKEN: ${{ steps.bot.outputs.token }}
        run: |
          #echo "Getting OIDC token..."
          #OIDC_TOKEN=$(curl -sS -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
          #  "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=github-pages" | jq -r '.value')
          #
          #if [ -z "$OIDC_TOKEN" ] || [ "$OIDC_TOKEN" = "null" ]; then
          #  echo "Error: Failed to get OIDC token"
          #  exit 1
          #fi
          #echo "OIDC token obtained (first 20 chars): ${OIDC_TOKEN:0:20}..."

          echo "Building deployment payload..."
          PAYLOAD=$(jq -n \
            --argjson artifact_id "${{ steps.artifact.outputs.artifact_id }}" \
            --arg pages_build_version "${{ github.sha }}" \
            '{artifact_id: $artifact_id, pages_build_version: $pages_build_version}')

          echo "Payload:"
          echo "$PAYLOAD" | jq '.'

          echo "Creating Pages deployment..."
          RESPONSE=$(gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/pages/deployments \
            --input - <<< "$PAYLOAD")

          echo "Deployment response:"
          echo "$RESPONSE" | jq '.'

          DEPLOYMENT_ID=$(echo "$RESPONSE" | jq -r '.id')
          PAGE_URL=$(echo "$RESPONSE" | jq -r '.page_url')

          if [ -z "$DEPLOYMENT_ID" ] || [ "$DEPLOYMENT_ID" = "null" ]; then
            echo "Error: Failed to create deployment"
            exit 1
          fi

          echo "page_url=$PAGE_URL" >> $GITHUB_OUTPUT
          echo "Deployment ID: $DEPLOYMENT_ID"
          echo "Page URL: $PAGE_URL"

          # Poll deployment status
          MAX_ATTEMPTS=60
          ATTEMPT=0
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            STATUS=$(gh api /repos/${{ github.repository }}/pages/deployments/$DEPLOYMENT_ID --jq '.status')

            echo "Deployment status: $STATUS"

            if [ "$STATUS" = "succeed" ]; then
              echo "Deployment succeeded!"
              exit 0
            elif [ "$STATUS" = "deployment_failed" ] || [ "$STATUS" = "deployment_content_failed" ] || [ "$STATUS" = "deployment_cancelled" ]; then
              echo "Deployment failed with status: $STATUS"
              exit 1
            fi

            ATTEMPT=$((ATTEMPT + 1))
            sleep 10
          done

          echo "Deployment timed out"
          exit 1
