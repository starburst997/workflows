name: JD Code

on:
  workflow_call:
    secrets:
      BOT_ID:
        required: false
        description: "GitHub App ID for the custom bot"
      BOT_KEY:
        required: false
        description: "GitHub App private key for the custom bot"
      CLAUDE_CODE_OAUTH_TOKEN:
        required: true
        description: "Claude Code OAuth token for authentication"
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned, labeled]
  pull_request_review:
    types: [submitted]

# Permissions set by workflow call
# permissions:
#   issues: write
#   contents: read
#   pull-requests: read
#   id-token: write
#   actions: write

jobs:
  setup:
    uses: ./.github/workflows/vars.yml

  # Special job that only adds a comment when the JD label is added
  label-comment:
    needs: setup
    if: |
      github.event_name == 'issues' &&
      github.event.action == 'labeled' &&
      github.event.label.name == 'jd' &&
      (github.event.sender.login == github.repository_owner || github.event.sender.login == 'jd-botvin[bot]')
    runs-on: ubuntu-latest
    steps:
      - name: Initialize custom bot
        id: bot
        uses: starburst997/custom-bot-init@v1
        with:
          app-id: ${{ secrets.BOT_ID }}
          private-key: ${{ secrets.BOT_KEY }}

      - name: Add comment to trigger JD
        env:
          GH_TOKEN: ${{ steps.bot.outputs.token }}
        run: |
          gh issue comment ${{ github.event.issue.number }} \
            --repo ${{ github.repository }} \
            --body '/jd call command /common:issue'

  jd:
    needs: setup
    if: |
      (github.event.sender.login == github.repository_owner || github.event.sender.login == 'jd-botvin[bot]') &&
      (
        (github.event_name == 'issue_comment' && contains(github.event.comment.body, '/jd')) ||
        (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '/jd')) ||
        (github.event_name == 'pull_request_review' && contains(github.event.review.body, '/jd')) ||
        (github.event_name == 'issues' && github.event.action != 'labeled' && (contains(github.event.issue.body, '/jd') || contains(github.event.issue.title, '/jd')))
      )
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Initialize custom bot
        id: bot
        uses: starburst997/custom-bot-init@v1
        with:
          app-id: ${{ secrets.BOT_ID }}
          private-key: ${{ secrets.BOT_KEY }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Detect trigger source
        id: detect_source
        run: |
          if [ "${{ github.event_name }}" == "issue_comment" ]; then
            echo "source=issue_comment" >> $GITHUB_OUTPUT
            echo "message=Triggered from an issue comment" >> $GITHUB_OUTPUT
            echo "üîî Triggered from an issue comment"
          elif [ "${{ github.event_name }}" == "pull_request_review_comment" ]; then
            echo "source=pr_review_comment" >> $GITHUB_OUTPUT
            echo "message=Triggered from a PR review comment (code comment)" >> $GITHUB_OUTPUT
            echo "üí¨ Triggered from a PR review comment (code comment)"
          elif [ "${{ github.event_name }}" == "pull_request_review" ]; then
            echo "source=pr_review" >> $GITHUB_OUTPUT
            echo "message=Triggered from a PR review" >> $GITHUB_OUTPUT
            echo "üìù Triggered from a PR review"
          elif [ "${{ github.event_name }}" == "issues" ]; then
            echo "source=issue" >> $GITHUB_OUTPUT
            echo "message=Triggered from an issue being opened or assigned" >> $GITHUB_OUTPUT
            echo "üìã Triggered from an issue being opened or assigned"
          else
            echo "source=unknown" >> $GITHUB_OUTPUT
            echo "message=Triggered from an unknown source" >> $GITHUB_OUTPUT
            echo "‚ùì Triggered from an unknown source"
          fi

      #- name: Determine prompt
      #  id: determine_prompt
      #  run: |
      #    if [ "${{ steps.detect_source.outputs.source }}" == "issue_comment" ] || [ "${{ steps.detect_source.outputs.source }}" == "issue" ]; then
      #      echo "prompt=/common:issue" >> $GITHUB_OUTPUT
      #      echo "üìù Using /common:issue prompt"
      #    else
      #      echo "prompt=" >> $GITHUB_OUTPUT
      #      echo "üìù Using default prompt (from trigger comment)"
      #    fi

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@v1
        with:
          github_token: ${{ steps.bot.outputs.token }}
          bot_id: ${{ secrets.BOT_ID }}
          bot_name: ${{ steps.bot.outputs.name }}
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          allowed_bots: ${{ steps.bot.outputs.slug }}
          plugin_marketplaces: ${{ needs.setup.outputs.plugin-marketplaces }}
          plugins: ${{ needs.setup.outputs.plugins }}
          trigger_phrase: ${{ needs.setup.outputs.trigger-phrase }}
          branch_prefix: ${{ needs.setup.outputs.branch-prefix }}
          assignee_trigger: "@${{ steps.bot.outputs.slug }}"
          label_trigger: ${{ needs.setup.outputs.label-trigger }}
          use_commit_signing: true
          #prompt: ${{ steps.determine_prompt.outputs.prompt }}

          # This is an optional setting that allows Claude to read CI results on PRs
          #additional_permissions: |
          #  actions: read

          # Optional: Add claude_args to customize behavior and configuration
          # See https://github.com/anthropics/claude-code-action/blob/main/docs/usage.md
          # or https://docs.claude.com/en/docs/claude-code/cli-reference for available options
          claude_args: '--allowed-tools "${{ needs.setup.outputs.allowed-tools }}"'

      - name: Find Claude completion comment
        if: |
          steps.detect_source.outputs.source == 'issue_comment' ||
          steps.detect_source.outputs.source == 'issue' ||
          steps.detect_source.outputs.source == 'pr_review_comment'
        id: find_comment
        uses: starburst997/find-comment@v3
        with:
          token: ${{ steps.bot.outputs.token }}
          issue-number: ${{ github.event.issue.number || github.event.pull_request.number }}
          body-includes: "**Claude finished"

      - name: Process comment body
        if: steps.find_comment.outputs.comment-id != ''
        id: process_body
        env:
          BOT_SLUG: ${{ steps.bot.outputs.slug }}
        run: |
          # Save the original comment body to a file
          cat << 'EOF' > original_comment.txt
          ${{ steps.find_comment.outputs.comment-body }}
          EOF

          # Process the comment: replace Claude with JD, remove bot mention tasks, remove Create PR link, remove branch footers
          sed -e 's/\*\*Claude finished/\*\*JD finished/g' original_comment.txt | \
            sed -E "s/@${BOT_SLUG}\[bot\]'s task/the task/g" | \
            sed -E 's/ ‚Ä¢ \[Create PR ‚ûî\]\([^)]+\)//g' | \
            perl -0777 -pe 's/\n---\s*\n\[Branch: [^\]]+\]\([^\)]+\)\s*\|?\s*$//gs' | \
            perl -0777 -pe 's/\n---\s*$//gs' | \
            perl -0777 -pe 's/\n---\s*‚Ä¢\s*$//gs' > processed_comment.txt

          # Set the processed body as output (using EOF to handle multiline)
          echo "body<<EOF" >> $GITHUB_OUTPUT
          cat processed_comment.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update comment to rebrand as JD
        if: steps.find_comment.outputs.comment-id != ''
        uses: starburst997/create-or-update-comment@v4
        with:
          token: ${{ steps.bot.outputs.token }}
          comment-id: ${{ steps.find_comment.outputs.comment-id }}
          edit-mode: replace
          body: ${{ steps.process_body.outputs.body }}
