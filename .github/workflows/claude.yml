name: Claude Code

on:
  workflow_call:
    inputs:
      trigger_phrase:
        description: 'The trigger phrase to activate Claude'
        required: false
        type: string
        default: '/jd'
      branch_prefix:
        description: 'Prefix for created branches'
        required: false
        type: string
        default: 'jd/'
      plugins:
        description: 'Plugins to load'
        required: false
        type: string
        default: 'common@jd'
      allowed_bots:
        description: 'Allowed bot slugs'
        required: false
        type: string
      plugin_marketplaces:
        description: 'Plugin marketplace URLs'
        required: false
        type: string
        default: 'https://github.com/starburst997/claude.git'
    secrets:
      BOT_ID:
        required: true
      BOT_KEY:
        required: true
      CLAUDE_CODE_OAUTH_TOKEN:
        required: true
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '/jd')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '/jd')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '/jd')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '/jd') || contains(github.event.issue.title, '/jd')))
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
      actions: write
    steps:
      - name: Initialize custom bot
        id: bot
        uses: starburst997/custom-bot-init@v1
        with:
          app-id: ${{ secrets.BOT_ID }}
          private-key: ${{ secrets.BOT_KEY }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Detect trigger source
        id: detect_source
        run: |
          if [ "${{ github.event_name }}" == "issue_comment" ]; then
            echo "source=issue_comment" >> $GITHUB_OUTPUT
            echo "message=Triggered from an issue comment" >> $GITHUB_OUTPUT
            echo "üîî Triggered from an issue comment"
          elif [ "${{ github.event_name }}" == "pull_request_review_comment" ]; then
            echo "source=pr_review_comment" >> $GITHUB_OUTPUT
            echo "message=Triggered from a PR review comment (code comment)" >> $GITHUB_OUTPUT
            echo "üí¨ Triggered from a PR review comment (code comment)"
          elif [ "${{ github.event_name }}" == "pull_request_review" ]; then
            echo "source=pr_review" >> $GITHUB_OUTPUT
            echo "message=Triggered from a PR review" >> $GITHUB_OUTPUT
            echo "üìù Triggered from a PR review"
          elif [ "${{ github.event_name }}" == "issues" ]; then
            echo "source=issue" >> $GITHUB_OUTPUT
            echo "message=Triggered from an issue being opened or assigned" >> $GITHUB_OUTPUT
            echo "üìã Triggered from an issue being opened or assigned"
          else
            echo "source=unknown" >> $GITHUB_OUTPUT
            echo "message=Triggered from an unknown source" >> $GITHUB_OUTPUT
            echo "‚ùì Triggered from an unknown source"
          fi

      - name: Determine prompt
        id: determine_prompt
        run: |
          if [ "${{ steps.detect_source.outputs.source }}" == "issue_comment" ] || [ "${{ steps.detect_source.outputs.source }}" == "issue" ]; then
            echo "prompt=/common:issue" >> $GITHUB_OUTPUT
            echo "üìù Using /common:issue prompt"
          else
            echo "prompt=" >> $GITHUB_OUTPUT
            echo "üìù Using default prompt (from trigger comment)"
          fi

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@v1
        with:
          github_token: ${{ steps.bot.outputs.token }}
          bot_id: ${{ secrets.BOT_ID }}
          bot_name: ${{ steps.bot.outputs.name }}
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          allowed_bots: ${{ inputs.allowed_bots || steps.bot.outputs.slug }}
          plugin_marketplaces: ${{ inputs.plugin_marketplaces || 'https://github.com/starburst997/claude.git' }}
          plugins: ${{ inputs.plugins || 'common@jd' }}
          trigger_phrase: ${{ inputs.trigger_phrase || '/jd' }}
          branch_prefix: ${{ inputs.branch_prefix || 'jd/' }}
          assignee_trigger: "@${{ steps.bot.outputs.slug }}"
          label_trigger: jd
          use_commit_signing: true
          #prompt: ${{ steps.determine_prompt.outputs.prompt }}

          # This is an optional setting that allows Claude to read CI results on PRs
          #additional_permissions: |
          #  actions: read

          # Optional: Add claude_args to customize behavior and configuration
          # See https://github.com/anthropics/claude-code-action/blob/main/docs/usage.md
          # or https://docs.claude.com/en/docs/claude-code/cli-reference for available options
          claude_args: '--allowed-tools "SlashCommand,Bash(git fetch:*),Bash(gh api:*),Bash(gh issue view:*),Bash(gh search:*),Bash(gh issue list:*),Bash(gh pr comment:*),Bash(gh pr diff:*),Bash(gh pr view:*),Bash(gh pr list:*),Bash(gh pr create:*),WebSearch,WebFetch(domain:github.com),WebFetch(domain:*),Bash(mkdir:*),Bash(chmod:*),Bash(rm:*),Bash(mv:*),Bash(cp:*),Bash(cat:*),Bash(echo:*)"'

      - name: Find Claude completion comment
        if: |
          steps.detect_source.outputs.source == 'issue_comment' ||
          steps.detect_source.outputs.source == 'issue'
        id: find_comment
        uses: starburst997/find-comment@v3
        with:
          token: ${{ steps.bot.outputs.token }}
          issue-number: ${{ github.event.issue.number || github.event.pull_request.number }}
          body-includes: "**Claude finished"

      - name: Process comment body
        if: steps.find_comment.outputs.comment-id != ''
        id: process_body
        run: |
          # Save the original comment body to a file
          cat << 'EOF' > original_comment.txt
          ${{ steps.find_comment.outputs.comment-body }}
          EOF

          # Process the comment: replace Claude with JD, remove Create PR link, remove branch footer, and remove trailing footer separators
          sed -e 's/\*\*Claude finished/\*\*JD finished/g' original_comment.txt | \
            sed -E 's/ ‚Ä¢ \[Create PR ‚ûî\]\([^)]+\)//g' | \
            perl -pe 's/\n---.*\[Branch: [^\]]+\]\([^\)]+\)$//g' | \
            perl -pe 's/\n---\s*\|\s*$//g' > processed_comment.txt

          # Set the processed body as output (using EOF to handle multiline)
          echo "body<<EOF" >> $GITHUB_OUTPUT
          cat processed_comment.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update comment to rebrand as JD
        if: steps.find_comment.outputs.comment-id != ''
        uses: starburst997/create-or-update-comment@v4
        with:
          token: ${{ steps.bot.outputs.token }}
          comment-id: ${{ steps.find_comment.outputs.comment-id }}
          edit-mode: replace
          body: ${{ steps.process_body.outputs.body }}
